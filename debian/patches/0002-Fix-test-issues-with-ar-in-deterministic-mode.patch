From: Manoj Srivastava <srivasta@debian.org>
Date: Sat, 16 Jan 2016 12:55:37 -0800
Subject: Fix test issues with ar in deterministic mode

The ar program in the binutils package in Debian is now configured
with --enable-deterministic-archives. This change makes the archives
reproducible, by setting the UID, GID, and timestamp to 0. However,
when dealing with archives created with the libxx(*.o) style rules,
make needs the timestamp of the file in order to decide to update it
or not. With the current deterministic behavior of ar, the timestamp
is always 0 and make fails to build, failing 7 out of 10 archive
tests.Since make seems to depend on timestamps for this rule it makes
sense to always pass on the -U flag for the test suite

This commit makes the minimal changes to make the test suite pass
whether or not ar defaults to using deterministic mode.

There is some online discussion:
https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=798804
https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=798913
https://bugzilla.redhat.com/show_bug.cgi?id=1195883

Signed-off-by: Manoj Srivastava <srivasta@debian.org>
---
 tests/scripts/features/archives | 14 +++++++-------
 tests/scripts/targets/POSIX     |  2 +-
 tests/test_driver.pl            |  5 +++++
 3 files changed, 13 insertions(+), 8 deletions(-)

diff --git a/tests/scripts/features/archives b/tests/scripts/features/archives
index b0acfec..cb799e7 100644
--- a/tests/scripts/features/archives
+++ b/tests/scripts/features/archives
@@ -28,17 +28,17 @@ unlink('libxx.a');
 
 # Very simple
 run_make_test('all: libxx.a(a1.o)',
-              '', "$ar rv libxx.a a1.o\n$created");
+              '', "$ar rvU libxx.a a1.o\n$created");
 
 # Multiple .o's.  Add a new one to the existing library
 ($_ = $add) =~ s/#OBJECT#/a2.o/g;
 run_make_test('all: libxx.a(a1.o a2.o)',
-              '', "$ar rv libxx.a a2.o\n$_");
+              '', "$ar rvU libxx.a a2.o\n$_");
 
 # Touch one of the .o's so it's rebuilt
 utouch(-40, 'a1.o');
 ($_ = $repl) =~ s/#OBJECT#/a1.o/g;
-run_make_test(undef, '', "$ar rv libxx.a a1.o\n$_");
+run_make_test(undef, '', "$ar rvU libxx.a a1.o\n$_");
 
 # Use wildcards
 run_make_test('all: libxx.a(*.o)',
@@ -47,21 +47,21 @@ run_make_test('all: libxx.a(*.o)',
 # Touch one of the .o's so it's rebuilt
 utouch(-30, 'a1.o');
 ($_ = $repl) =~ s/#OBJECT#/a1.o/g;
-run_make_test(undef, '', "$ar rv libxx.a a1.o\n$_");
+run_make_test(undef, '', "$ar rvU libxx.a a1.o\n$_");
 
 # Use both wildcards and simple names
 utouch(-50, 'a2.o');
 ($_ = $add) =~ s/#OBJECT#/a3.o/g;
-$_ .= "$ar rv libxx.a a2.o\n";
+$_ .= "$ar rvU libxx.a a2.o\n";
 ($_ .= $repl) =~ s/#OBJECT#/a2.o/g;
 run_make_test('all: libxx.a(a3.o *.o)', '',
-              "$ar rv libxx.a a3.o\n$_");
+              "$ar rvU libxx.a a3.o\n$_");
 
 # Check whitespace handling
 utouch(-40, 'a2.o');
 ($_ = $repl) =~ s/#OBJECT#/a2.o/g;
 run_make_test('all: libxx.a(  a3.o    *.o     )', '',
-              "$ar rv libxx.a a2.o\n$_");
+              "$ar rvU libxx.a a2.o\n$_");
 
 rmfiles(qw(a1.o a2.o a3.o libxx.a));
 
diff --git a/tests/scripts/targets/POSIX b/tests/scripts/targets/POSIX
index f2dbd6c..4fdcc43 100644
--- a/tests/scripts/targets/POSIX
+++ b/tests/scripts/targets/POSIX
@@ -36,7 +36,7 @@ $slurp =~ s:^#0  all at .*work/targets/:#0 all at work/targets/:gm;
 &compare_output_string($answer, $slurp, $logfile);
 
 # Test the default value of various POSIX-specific variables
-my %POSIX = (AR => 'ar', ARFLAGS => '-rv',
+my %POSIX = (AR => 'ar', ARFLAGS => 'rvU',
              YACC => 'yacc', YFLAGS => '',
              LEX => 'lex', LFLAGS => '',
              LDFLAGS => '',
diff --git a/tests/test_driver.pl b/tests/test_driver.pl
index 640815f..ec595e2 100644
--- a/tests/test_driver.pl
+++ b/tests/test_driver.pl
@@ -151,6 +151,11 @@ sub toplevel
 
   $makeENV{LC_ALL} = 'C';
 
+  # HACK. On Debian, ar is now compiled with determinism, which makes
+  # make tests fail. Pass in the U modifier to revert that behaviour change
+  # If ar has not been changed, this should be a no-op.
+  $makeENV{ARFLAGS} = 'rvU';
+
   # Replace the environment with the new one
   #
   %origENV = %ENV unless $^O eq 'VMS';
